{"version":3,"sources":["menu-food/FoodMenu.jsx","menu-drink/DrinkMenu.jsx","menu-wines/WinesMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["FoodMenu","className","id","DrinkMenu","WinesMenu","App","props","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAuBeA,EAnBE,WACb,OACI,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,OAAOC,GAAG,eAEzB,yBAAKD,UAAU,OAAOC,GAAG,gBAEzB,yBAAKD,UAAU,OAAOC,GAAG,eAEzB,yBAAKD,UAAU,OAAOC,GAAG,eAEzB,yBAAKD,UAAU,OAAOC,GAAG,eAEzB,yBAAKD,UAAU,OAAOC,GAAG,iBCUtBC,EAzBG,WACd,OACI,yBAAKF,UAAU,wBACX,yBAAKA,UAAU,OAAOC,GAAG,iBAEzB,yBAAKD,UAAU,OAAOC,GAAG,kBAEzB,yBAAKD,UAAU,OAAOC,GAAG,iBAEzB,yBAAKD,UAAU,OAAOC,GAAG,iBAEzB,yBAAKD,UAAU,OAAOC,GAAG,iBAEzB,yBAAKD,UAAU,OAAOC,GAAG,iBAEzB,yBAAKD,UAAU,OAAOC,GAAG,mBAEzB,yBAAKD,UAAU,OAAOC,GAAG,kBAEzB,yBAAKD,UAAU,OAAOC,GAAG,mBCNtBE,EAbG,WACd,OACI,yBAAKH,UAAU,uBACX,yBAAKA,UAAU,OAAOC,GAAG,eAEzB,yBAAKD,UAAU,OAAOC,GAAG,gBAEzB,yBAAKD,UAAU,OAAOC,GAAG,iB,MCiDtBG,MA5Cf,SAAaC,GAWX,OACE,kBAAC,IAAD,KACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,uBACf,4BAAQA,UAAU,eAChB,wBAAIA,UAAU,aACZ,4BACE,kBAAC,IAAD,CAAMA,UAAU,cAAcM,GAAG,KAAjC,SAEF,4BACE,kBAAC,IAAD,CAAMN,UAAU,cAAcM,GAAG,WAAjC,WAEF,4BACE,kBAAC,IAAD,CAAMN,UAAU,cAAcM,GAAG,UAAjC,WAGJ,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,UAAUC,UAAWP,IACvC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,SAASC,UAAWN,UCjChCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7b90d38.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst FoodMenu = () => {\n    return (\n        <div className='container-menu-food'>\n            <div className='menu' id='first-menu'>\n            </div>\n            <div className='menu' id='second-menu'>\n            </div>\n            <div className='menu' id='third-menu'>\n            </div>\n            <div className='menu' id='forth-menu'>    \n            </div>\n            <div className='menu' id='fifth-menu'>\n            </div>\n            <div className='menu' id='sixth-menu'>\n            </div>\n        </div>\n    )\n}\n\nexport default FoodMenu\n","import React from 'react'\n\nconst DrinkMenu = () => {\n    return (\n        <div className=\"container-menu-drink\">\n            <div className='menu' id='first-drinks'>\n            </div>\n            <div className='menu' id='second-drinks'>\n            </div>\n            <div className='menu' id='third-drinks'>\n            </div>\n            <div className='menu' id='forth-drinks'>\n            </div>\n            <div className='menu' id='fifth-drinks'>\n            </div>\n            <div className='menu' id='sixth-drinks'>\n            </div>\n            <div className='menu' id='seventh-drinks'>\n            </div>\n            <div className='menu' id='eighth-drinks'>\n            </div>\n            <div className='menu' id='ninth-drinks'>\n            </div>\n        </div>\n    )\n}\n\nexport default DrinkMenu\n","import React from 'react'\n\nconst WinesMenu = () => {\n    return (\n        <div className=\"container-menu-wine\">\n            <div className='menu' id='first-wine'>\n            </div>\n            <div className='menu' id='second-wine'>\n            </div>\n            <div className='menu' id='third-wine'>\n            </div>\n        </div>\n    )\n}\n\nexport default WinesMenu\n","import React, {useState, useEffect} from 'react';\n\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom';\n\nimport FoodMenu from './menu-food/FoodMenu';\nimport DrinkMenu from './menu-drink/DrinkMenu';\nimport WinesMenu from './menu-wines/WinesMenu';\n\nimport './App.css';\n\n\n\n\n\nfunction App(props) {\n\n  // const [isMenuOpen, setIsMenuOpen] = useState(false);\n \n\n  // useEffect(() => props.history.listen(() => {\n  //   setIsMenuOpen(false);\n  // }));\n\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className='container-logo-dad'></div>\n        <header className='menu-header'>\n          <ul className='menu-list'>\n            <li>\n              <Link className='link-navbar' to='/'>Food</Link>\n            </li>\n            <li>\n              <Link className='link-navbar' to='/drinks'>Drinks</Link>\n            </li>\n            <li>\n              <Link className='link-navbar' to='/wines'>Wines</Link>\n            </li>\n          </ul>\n          <div>\n            <Switch>\n              <Route exact path='/' component={FoodMenu}/>\n              <Route exact path='/drinks' component={DrinkMenu}/>\n              <Route exact path='/wines' component={WinesMenu}/>\n            </Switch>\n          </div>\n        </header>\n        \n        {/* <div className=\"App-content\">\n          <FoodMenu />\n        </div> */}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}